<UserControl x:Class="Reginald.Views.ClipboardManagerPopupView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Reginald.Converters"
             xmlns:cal="http://www.caliburnproject.org"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Width="{Binding ConfigurationService.Theme.ClipboardWidth}"
             Height="{Binding ConfigurationService.Theme.ClipboardHeight}"
             FontFamily="{Binding ConfigurationService.Theme.FontFamily}">
    <UserControl.Resources>
        <ResourceDictionary>
            <!-- # DataTemplates -->

            <!-- ## DataTemplate for ListBoxItem -->
            <DataTemplate x:Key="ListBoxItemDataTemplate">
                <Grid VerticalAlignment="Center"
                      cal:Message.Attach="[Event MouseMove] = [Action Item_MouseMove($source, $eventargs)]">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="25"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
    
                    <!-- ### Icon -->
                    <Image Source="{Binding Icon}"
                           Grid.Column="0"
                           Width="15"
                           Height="15"
                           VerticalAlignment="Center"
                           SnapsToDevicePixels="True"/>
                    
                    <!-- ### Description -->
                    <TextBlock Text="{Binding Description}"
                               FontSize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.ClipboardItemFontSize}"
                               Grid.Column="1"
                               VerticalAlignment="Center"
                               TextWrapping="NoWrap"
                               TextTrimming="CharacterEllipsis">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}"
                                                 Value="True">
                                        <Setter Property="Foreground"
                                                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.SelectedDescriptionBrush}"/>
                                    </DataTrigger>
                                </Style.Triggers>

                                <Style.Setters>
                                    <Setter Property="Foreground"
                                            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.DescriptionBrush}"/>
                                </Style.Setters>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </DataTemplate>
            
            <!-- # ControlTemplates -->
            
            <!-- ## ControlTemplate for ListBoxItem -->
            <ControlTemplate x:Key="ListBoxItemControlTemplate"
                             TargetType="{x:Type ListBoxItem}">
                <Border x:Name="listBoxItemBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected"
                             Value="True">
                        <Setter TargetName="listBoxItemBorder"
                                Property="Background"
                                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.HighlightBrush}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- # Styles -->

            <!-- ## Style for Border -->
            <Style x:Key="BorderStyle"
                   TargetType="{x:Type Border}">
                <!-- ### Setters -->
                <Style.Setters>
                    <Setter Property="Background"
                            Value="{Binding ConfigurationService.Theme.BackgroundBrush}"/>
                </Style.Setters>

                <!-- ### Triggers -->
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ConfigurationService.Theme.IsAcrylicEnabled}"
                                 Value="True">
                        <Setter Property="Background"
                                Value="#01000000"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- ## Style for ListBoxItem -->
            <Style x:Key="ListBoxItemContainerStyle"
                   TargetType="{x:Type ListBoxItem}"
                   BasedOn="{StaticResource {x:Type ListBoxItem}}">
                <!-- ### Resources -->
                <Style.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius"
                                Value="2.5"/>
                    </Style>
                </Style.Resources>

                <!-- ### Setters -->
                <Style.Setters>
                    <Setter Property="Foreground"
                            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.InputBrush}"/>
                    <Setter Property="Height"
                            Value="25"/>
                    <Setter Property="Margin"
                            Value="0"/>
                    <Setter Property="Padding"
                            Value="0"/>
                    <Setter Property="HorizontalContentAlignment"
                            Value="Stretch"/>
                    <Setter Property="Template"
                            Value="{StaticResource ListBoxItemControlTemplate}"/>
                </Style.Setters>

                <!-- ### Triggers -->
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.IsMouseOverChanged}"
                                       Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}"
                                       Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="IsSelected"
                                    Value="True"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
            
            <!-- ## Style for Popup Close Border -->
            <Style x:Key="PopupCloseBorderStyle"
                   TargetType="{x:Type Border}">
                <!-- ### Triggers -->
                <Style.Triggers>
                    <Trigger Property="IsMouseOver"
                             Value="True">
                        <Setter Property="Background"
                                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.ConfigurationService.Theme.HighlightBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <!-- ## Style for StandardClipboardItemTextBox -->
            <Style x:Key="StandardClipboardItemTextBoxStyle"
                   TargetType="{x:Type TextBox}">
                <!-- ### Triggers -->
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding SelectedItem.HexBrush}"
                                       Value="{x:Null}"/>
                            <Condition Binding="{Binding SelectedItem.Image}"
                                       Value="{x:Null}"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Visibility"
                                    Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
                
                <!-- ### Setters -->
                <Style.Setters>
                    <Setter Property="Visibility"
                            Value="Collapsed"/>
                </Style.Setters>
            </Style>
            
            <!-- ## Style for StackPanel Hex -->
            <Style x:Key="StackPanelHexStyle"
                   TargetType="{x:Type StackPanel}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding SelectedItem.HexBrush}"
                                 Value="{x:Null}">
                        <Setter Property="Visibility"
                                Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- # Style for StandardClipboardItemImage -->
            <Style x:Key="StandardClipboardItemImageStyle"
                   TargetType="{x:Type Image}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding SelectedItem.Image}"
                                 Value="{x:Null}">
                        <Setter Property="Visibility"
                                Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- # Converters -->
            <local:BrushToStringConverter x:Key="BrushToStringConverter"/>
        </ResourceDictionary>
    </UserControl.Resources>

    <!-- # Popup -->
    <Border Style="{StaticResource BorderStyle}"
            BorderBrush="{Binding ConfigurationService.Theme.BorderBrush}"
            BorderThickness="{Binding ConfigurationService.Theme.BorderThickness}"
            CornerRadius="{Binding ConfigurationService.Theme.CornerRadius}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="25"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <!-- ## Popup Menu -->
            <Border Grid.Row="0"
                    Background="Transparent"
                    cal:Message.Attach="[Event PreviewMouseLeftButtonDown] = [Action Menu_PreviewMouseLeftButtonDown($this, $eventargs)];">
                <DockPanel Margin="5 0">
                    <!-- ## Dummy Border to Keep Popup Bar Centered -->
                    <Border DockPanel.Dock="Left"
                            Width="{Binding ElementName=closeBorder, Path=ActualWidth, UpdateSourceTrigger=PropertyChanged}"
                            Height="{Binding ElementName=closeBorder, Path=ActualHeight, UpdateSourceTrigger=PropertyChanged}"/>

                    <!-- ### Popup Close Border -->
                    <Border x:Name="closeBorder"
                            Style="{StaticResource PopupCloseBorderStyle}"
                            CornerRadius="{Binding ConfigurationService.Theme.CornerRadius}"
                            DockPanel.Dock="Right"
                            Width="20"
                            Height="20"
                            cal:Message.Attach="[Event MouseLeftButtonDown] = [Action PopupCloseBorder_MouseLeftButtonDown($this, $eventargs)]">
                        <Path Stroke="{Binding ConfigurationService.Theme.DescriptionBrush}"
                              Data="M0,0L12,12M12,0L0,12"
                              Width="12"
                              Height="12"
                              StrokeThickness="1.5"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"/>
                    </Border>

                    <!-- ### Popup Bar-->
                    <Border Background="{Binding ConfigurationService.Theme.PlaceholderInputBrush}"
                            Width="50"
                            Height="3"
                            CornerRadius="1.5"
                            HorizontalAlignment="Center"/>
                </DockPanel>
            </Border>
            
            <!-- ## Popup TextBox -->
            <TextBox Text="{Binding UserInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Foreground="{Binding ConfigurationService.Theme.InputBrush}"
                     CaretBrush="{Binding ConfigurationService.Theme.CaretBrush}"
                     FontSize="{Binding ConfigurationService.Theme.ClipboardItemFontSize}"
                     FontWeight="{Binding ConfigurationService.Theme.InputFontWeight}"
                     SelectionBrush="{Binding ConfigurationService.Theme.SelectionBrush}"
                     SelectionOpacity="{Binding ConfigurationService.Theme.SelectionOpacity}"
                     Margin="0"
                     Grid.Row="1"
                     Background="Transparent"
                     BorderThickness="0"
                     VerticalContentAlignment="Center"
                     cal:Message.Attach="[Event Loaded] = [Action UserInput_Loaded($this, $eventargs)];
                                         [Event LayoutUpdated] = [Action UserInput_LayoutUpdated($source, $eventargs)];
                                         [Event PreviewKeyDown] = [Action UserInput_PreviewKeyDown($this, $eventargs)]"/>

            <!-- ## Standard Popup Content -->
            <Grid Grid.Row="2"
                  Margin="5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="5"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- ### Left Side -->
                <StackPanel Grid.Column="0">
                    <!-- #### Clipboard Items -->
                    <ListBox ItemTemplate="{StaticResource ListBoxItemDataTemplate}"
                             ItemContainerStyle="{StaticResource ListBoxItemContainerStyle}"
                             ItemsSource="{Binding DisplayItems}"
                             SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                             Grid.Column="0"
                             Height="Auto"
                             Background="Transparent"
                             BorderThickness="0"
                             ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                             ScrollViewer.VerticalScrollBarVisibility="Auto"
                             ScrollViewer.CanContentScroll="False"
                             cal:Message.Attach="[Event PreviewMouseLeftButtonDown] = [Action Items_PreviewMouseLeftButtonDown($source, $eventargs)];
                                                 [Event MouseLeave] = [Action Items_MouseLeave($this, $eventargs)];
                                                 [Event SelectionChanged] = [Action Items_SelectionChanged($source, $eventargs)]"/>
                </StackPanel>

                <!-- ### Clipboard Item Viewer -->
                <Border Grid.Column="2">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="20"/>
                        </Grid.RowDefinitions>

                        <!-- #### Standard Display for Text Clipboard Item -->
                        <TextBox Style="{StaticResource StandardClipboardItemTextBoxStyle}"
                                 Text="{Binding SelectedItem.Description, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                 Foreground="{Binding ConfigurationService.Theme.InputBrush}"
                                 FontSize="{Binding ConfigurationService.Theme.ClipboardDisplayFontSize}"
                                 Grid.Row="0"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 IsReadOnly="True"
                                 TextWrapping="Wrap"
                                 Cursor="Arrow"
                                 VerticalContentAlignment="Top"
                                 VerticalScrollBarVisibility="Auto"/>
                        <!-- #### Color Display for Hex Values -->
                        <StackPanel Style="{StaticResource StackPanelHexStyle}"
                                    Grid.Row="0">
                            <Border Background="{Binding SelectedItem.HexBrush}"
                                    Width="50"
                                    Height="50"/>
                            <TextBox Text="{Binding SelectedItem.HexBrush, Converter={StaticResource BrushToStringConverter}, ConverterParameter='{}#{0:X2}{1:X2}{2:X2}'}"
                                     Background="Transparent"
                                     BorderThickness="0"
                                     IsReadOnly="True"
                                     TextWrapping="Wrap"
                                     Cursor="Arrow"
                                     HorizontalAlignment="Center"/>
                        </StackPanel>

                        <!-- #### Standard Display for Image Clipboard Item -->
                        <Image Style="{StaticResource StandardClipboardItemImageStyle}"
                               Source="{Binding SelectedItem.Image}"
                               Grid.Row="0"/>

                        <!-- #### Clipboard Item Info -->
                        <TextBlock Foreground="{Binding ConfigurationService.Theme.PlaceholderInputBrush}"
                                   FontSize="{Binding ConfigurationService.Theme.ClipboardDisplayFontSize}"
                                   Grid.Row="1"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center">
                            <TextBlock.Text>
                                <MultiBinding StringFormat="{}Copied on {0:MMM d, yyyy} @ {1:t}">
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}"
                                             Path="DataContext.SelectedItem.DateTime"/>
                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=UserControl}"
                                             Path="DataContext.SelectedItem.DateTime"/>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                    </Grid>
                </Border>
            </Grid>
        </Grid>
    </Border>
</UserControl>
