<UserControl x:Class="Reginald.Views.ExpansionsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:cal="http://caliburnmicro.com"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <ScrollViewer Focusable="True"
                  FocusVisualStyle="{x:Null}"
                  cal:Message.Attach="[Event PreviewMouseWheel] = [Action ScrollViewer_PreviewMouseWheel($source, $eventargs)];
                                      [Event MouseLeftButtonDown] = [Action ScrollViewer_MouseLeftButtonDown($source, $eventargs)]">
        <hc:UniformSpacingPanel Orientation="Vertical"
                                Spacing="24"
                                Margin="0 0 16 0">
            <!-- # Title -->
            <TextBlock Style="{StaticResource TitleTextBlockStyle}"
                       Text="Expansions"/>

            <!-- ## Description -->
            <TextBlock Style="{StaticResource NormalTextBlockStyle}">
                Text expansions are useful for preventing you from repeatedly typing the same thing. When characters that you type match one of your triggers, that text will be replaced by some other text designated by you.
                <LineBreak/>
                <LineBreak/>
                You can activate an expansion by typing a dollar sign ($) and then by typing your trigger.
            </TextBlock>

            <Expander>
                <Expander.Header>
                    <TextBlock Text="❓"
                               Foreground="Orange"/>
                </Expander.Header>
                
                <TextBlock Style="{StaticResource IndentedNormalTextBlockStyle}"
                           Text="•  If you have a trigger called 'hello', you can trigger the exapnsion by typing: $hello"/>
            </Expander>
            
            <!-- ## Expansions -->
            <hc:UniformSpacingPanel Orientation="Vertical"
                                    Spacing="8">
                <TextBlock Text="Your expansions"
                           Style="{StaticResource SubtitleTextBlockStyle}"/>

                <DataGrid x:Name="Expansions"
                          SelectedItem="{Binding Path=SelectedExpansion, Mode=TwoWay}"
                          AutoGenerateColumns="False"
                          CanUserAddRows="False"
                          CanUserDeleteRows="False"
                          CanUserReorderColumns="False"
                          CanUserResizeColumns="False"
                          SelectionMode="Single"
                          HeadersVisibility="Column"
                          cal:Message.Attach="[Event LostFocus] = [Action Expansions_LostFocus($this, $eventargs)];
                                              [Event BeginningEdit] = [Action Expansions_BeginningEdit($this, $eventargs)];
                                              [Event CellEditEnding] = [Action Expansions_CellEditEnding($this, $eventargs)]">
                    <DataGrid.ContextMenu>
                        <ContextMenu >
                            <ContextMenu.Style>
                                <Style TargetType="{x:Type ContextMenu}"
                                       BasedOn="{StaticResource ContextMenuBaseStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SelectedExpansion}"
                                                     Value="{x:Null}">
                                            <Setter Property="Visibility"
                                                    Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContextMenu.Style>

                            <MenuItem Header="Delete"
                                      cal:Message.Attach="[Event Click] = [Action DeleteMenuItem_Click($this, $eventargs)]"/>
                        </ContextMenu>
                    </DataGrid.ContextMenu>

                    <DataGrid.Columns>
                        <!-- ### Trigger -->
                        <DataGridTextColumn Header="Trigger"
                                            Binding="{Binding Trigger, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                            IsReadOnly="False"
                                            Width="*">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextBlock.TextWrapping"
                                            Value="Wrap"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>

                        <!-- ### Replacement -->
                        <DataGridTextColumn Header="Replacement"
                                            Binding="{Binding Replacement, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                            IsReadOnly="False"
                                            Width="2*">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextBlock.TextWrapping"
                                            Value="Wrap"/>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </hc:UniformSpacingPanel>
            
            <!-- ## Add an Expansion-->
            <hc:UniformSpacingPanel Spacing="16"
                                    Orientation="Vertical">
                <TextBlock Text="Add an expansion"
                           Style="{StaticResource SubtitleTextBlockStyle}"/>

                <Expander>
                    <Expander.Header>
                        <TextBlock Text="❓"
                                   Foreground="Orange"/>
                    </Expander.Header>

                    <TextBlock Style="{StaticResource IndentedNormalTextBlockStyle}"
                               Text="•  Triggers can only contain lowercase letters and numbers"/>
                </Expander>

                <TextBox Style="{StaticResource TextBoxExtend}"
                         Text="{Binding Trigger, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         hc:InfoElement.Title="Trigger"
                         hc:InfoElement.TitlePlacement="Top"
                         hc:InfoElement.Necessary="True"/>

                <TextBox Style="{StaticResource TextBoxExtend}"
                         Text="{Binding Replacement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         hc:InfoElement.Title="Replacement"
                         hc:InfoElement.TitlePlacement="Top"
                         hc:InfoElement.Necessary="True"/>

                <Button Content="Add"
                        HorizontalAlignment="Right"
                        cal:Message.Attach="[Event Click] = [Action AddButton_Click($this, $eventargs)]">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}"
                               BasedOn="{StaticResource ButtonPrimary}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Trigger}"
                                            Value="{x:Null}">
                                    <Setter Property="IsEnabled"
                                            Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Trigger}"
                                             Value="">
                                    <Setter Property="IsEnabled"
                                            Value="False"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Replacement}"
                                             Value="{x:Null}">
                                    <Setter Property="IsEnabled"
                                            Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Replacement}"
                                             Value="">
                                    <Setter Property="IsEnabled"
                                            Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>

            </hc:UniformSpacingPanel>

        </hc:UniformSpacingPanel>
            
    </ScrollViewer>
</UserControl>
